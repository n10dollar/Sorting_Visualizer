
# x_base *= 5


"""
bar_width, bar_height = 10, 300
bar_x, bar_y = 60, 30
bar_coords = [bar_x, bar_y, bar_x + bar_width, bar_y]

bar_count = 10
for i in range(1, bar_count + 1):
    bar_coords = [bar_x + bar_width * (i - 1), bar_y, bar_x + bar_width * i,
                  bar_y + random.randrange(bar_height // 10, bar_height)]
    # bar_height * i
    # [bar_x * i, bar_y, bar_x + bar_width * i, bar_y + bar_height * i]
    canvas.create_rectangle(bar_coords, fill="red")
canvas.pack()

window.mainloop()

"""

# __________________


# li = random.sample(range(0, 30), 8)
# print(li)
# al.insertion_sort(li, 0)
# print(li)

# li_2 = random.sample(range(0, 30), 8)
# li_2 = al.merge_sort(li_2)
# print(li_2)




"""
def update(bars: list, window, canvas):
    for index in range(len(bars)):
        bars[index].set_index(index)

        # bars[index].draw(canvas)
    # canvas.pack()
    # window.update
    # time.sleep(100)
"""


    """if len(bars) == 2:
        if bars[0].get_height() > bars[1].get_height():
            ut.swap(bars, 0, 1)
        return bars
    """

    if 2 * index >= len(bars_heap):
        return

    children_indices = [2 * index + 1, 2 * index + 2]
    children_values = [bars_heap[children_indices[0]].get_height(), bars_heap[children_indices[1]].get_height()]

    biggest_child_index = children_indices[children_values.index(max(children_values))]
    # print(biggest_child_index)

    left_child = right_child = -1
    if 2 * index + 1 < len(bars_heap):
        left_child = bars_heap[2 * index + 1]
    if 2 * index + 2 < len(bars_heap):
        right_child = bars_heap[2 * index + 2]

    biggest_child = max(left_child, right_child, key=Bar.get_height())

    if biggest_child.get_height() > bars_heap[index].get_height():
        swap(bars_heap, index, biggest_child_index)
        sort_max_heap(bars_heap, biggest_child_index)

    child_indices = [2 * index + 1, 2 * index + 2]
    for i in range(len(child_indices)):
        if child_indices[i] >= len(bars_heap):
            child_indices[i] = None

    bigger_child_index = None
    for ind in child_indices:
        if ind is not None and bars_heap[ind] > bars_heap[bigger_child_index]:
            bigger_child_index = ind

    if bigger_child_index is not None:
        swap(bars_heap, index, bigger_child_index)
        sort_max_heap(bars_heap, bigger_child_index)